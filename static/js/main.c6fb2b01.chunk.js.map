{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","start","countDown","state","timer","setState","pauseResume","startClicked","workBreak","seconds","then","Date","now","count","setInterval","secsLeft","Math","round","display","clearInterval","Audio","play","break","console","log","reset","pause","resume","breakAddMinute","breakMinusMinute","timerAddMinute","timerMinusMinute","react_default","a","createElement","className","App_Timer","App_Break","App_Display","React","Component","Break","onClick","Display","minutes","floor","remainderSeconds","concat","resumePause","Timer","ReactDOM","render","App_App","document","getElementById","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c6fb2b01.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      break: 300,\r\n      timer: 1500,\r\n      display: 1500,\r\n      pauseResume: 'Pause',\r\n      startClicked: false,\r\n      workBreak: 'Work'\r\n      \r\n    }\r\n    //this.count;\r\n  }\r\n\r\n  start = () => {\r\n    this.countDown(this.state.timer);\r\n    this.setState({\r\n      pauseResume: 'Pause',\r\n      startClicked: true,\r\n      workBreak: 'Work'\r\n    })\r\n  }\r\n\r\n  countDown = (seconds) => {\r\n    let then = Date.now() + seconds * 1000;\r\n    this.count = setInterval(() => {\r\n      let secsLeft = Math.round((then - Date.now()) /1000);\r\n      this.setState({display: secsLeft});\r\n\r\n      if ( secsLeft <= 0 ) {\r\n        clearInterval(this.count);\r\n        let audio = new Audio('http://soundbible.com/mp3/Robot_blip-Marianne_Gagnon-120342607.mp3');\r\n        audio.play();\r\n        if ( this.state.workBreak === 'Work') {\r\n          this.countDown(this.state.break);\r\n          this.setState({workBreak: 'Break'});\r\n        } else {\r\n          this.countDown(this.state.timer);\r\n          this.setState({workBreak: 'Work'});\r\n        }\r\n      }\r\n      console.log(secsLeft);\r\n    }, 1000)\r\n  }\r\n\r\n  reset = () => {\r\n    clearInterval(this.count);\r\n    this.setState({display: this.state.timer})\r\n    this.setState({startClicked: false})\r\n  }\r\n\r\n  pause = () => {\r\n    clearInterval(this.count);\r\n    this.setState({pauseResume: 'Resume'})\r\n  }\r\n\r\n  resume = () => {\r\n    this.countDown(this.state.display);\r\n    this.setState({pauseResume: 'Pause'})\r\n  }\r\n\r\n  breakAddMinute = () => {\r\n    this.setState({\r\n      break: this.state.break + 60\r\n    })\r\n  }\r\n\r\n  breakMinusMinute = () => {\r\n    if(this.state.break > 60) {\r\n      this.setState({\r\n        break: this.state.break - 60\r\n      })\r\n    }\r\n  }\r\n\r\n  timerAddMinute = () => { \r\n    this.setState({\r\n      timer: this.state.timer + 60\r\n    })\r\n  }\r\n\r\n  timerMinusMinute = () => {\r\n    if(this.state.timer > 60) {\r\n      this.setState({\r\n      timer: this.state.timer - 60\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n          <h1 className=\"App-title\">Pomodoro oli </h1>\r\n        <div className='flex'>\r\n        <Timer \r\n          timer={this.state.timer}\r\n          timerAddMinute={this.timerAddMinute}\r\n          timerMinusMinute={this.timerMinusMinute} />\r\n        <Break \r\n          startClicked={this.state.startClicked}\r\n          break={this.state.break}\r\n          breakAddMinute={this.breakAddMinute} \r\n          breakMinusMinute={this.breakMinusMinute} />\r\n        </div>\r\n        <Display \r\n          display={this.state.display}\r\n          reset={this.reset}\r\n          pause={this.pause}\r\n          resume={this.resume}\r\n          pauseResume={this.state.pauseResume} \r\n          start={this.start}\r\n          startClicked={this.state.startClicked} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst Break = props => (\r\n  <div className='timerBreak'>\r\n    <h2>Break</h2>\r\n    <div className='flex'>\r\n      <button className='plusMinus' onClick={props.breakMinusMinute} >-</button>\r\n      <p>{props.break /60}</p>\r\n      <button className='plusMinus' onClick={props.breakAddMinute} >+</button>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst Display = props => {\r\n  let seconds = props.display;\r\n  let minutes = Math.floor(seconds / 60);\r\n  let remainderSeconds = seconds % 60;\r\n  let display = `${minutes}:${remainderSeconds < 10 ? '0' : ''}${remainderSeconds}`;\r\n  let resumePause = props.pauseResume === 'Pause' ? props.pause : props.resume;\r\n  return(\r\n    <div className='display'>\r\n      <p>{display}</p>\r\n      <button onClick={props.reset} >Reset</button>\r\n      {props.startClicked && <button onClick={resumePause} >{props.pauseResume}</button>}\r\n      {!props.startClicked && <button onClick={props.start}>Start</button>}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Timer = props => (\r\n  <div className='timerBreak'>\r\n    <h2>Time</h2>\r\n    <div className='flex'>\r\n      <button className='plusMinus' onClick={props.timerMinusMinute} >-</button>\r\n      <p>{props.timer /60}</p>\r\n      <button className='plusMinus' onClick={props.timerAddMinute} >+</button>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n  \r\n  ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}